package edu.uta.ucs;

import android.util.Log;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.Collections;

/**
 * Created by arunk_000 on 4/5/2015.
 *
 * <p>Contains 4 objects</p>
 *
 * <li>String Course Department, a 3 or more character string which represents the department. <br>EX: ENGL in "ENGL 1301"</li>
 * <li>String Course Number, 4 digit number which represents the course identifier. <br>EX: 1301 in "ENGL 1301"</li>
 * <li>String Course Name, University designation for a given course. <br>EX: "RHETORIC AND COMPOSITION I" for "ENGL 1301"</li>
 * <li>Arraylist of {@link Section} which are of this type of course.</li>
 */
public class Course {

    /**4 digit number which represents the course identifier. <br>EX: 1301 in "ENGL 1301"*/
    private String courseNumber;

    /** University designation for a given course.<br>EX: "RHETORIC AND COMPOSITION I" for "ENGL 1301"*/
    private String courseTitle;

    /** 3 or more character string which represents the department. <br>EX: ENGL in "ENGL 1301"*/
    private String departmentAcronym;

    /** Arraylist of {@link Section} which are of this type of course.*/
    private ArrayList<Section> sectionList;

    /**
     * Contstructor for {@link Course}
     * @param courseNumber String course number EX: 1301 in "ENGL 1301".
     * @param department String course department EX: ENGL in "ENGL 1301".
     * @param name  String course name. EX: "RHETORIC AND COMPOSITION I" for "ENGL 1301".
     * @param sectionList Arraylist of {@link Section} which are of this type of course.
     */
    Course(String courseNumber, String department, String name, ArrayList<Section> sectionList) {
        this.courseNumber = courseNumber;
        this.courseTitle = name;
        this.departmentAcronym = department;
        this.sectionList = sectionList;

        // Change source course to point to this course in case they already don't.
        for (Section section : sectionList){
            section.setSourceCourse(this);
        }
    }

    /**
     * Contstructor for {@link Course}.
     * <p>Does not contain an attached section list, so and empty one is generated.</p>
     * @param courseNumber String course number EX: 1301 in "ENGL 1301".
     * @param department String course department EX: ENGL in "ENGL 1301".
     * @param name  String course name. EX: "RHETORIC AND COMPOSITION I" for "ENGL 1301".
     */
    Course(String courseNumber, String department, String name) {
        this.courseNumber = courseNumber;
        this.courseTitle = name;
        this.departmentAcronym = department;
        this.sectionList = new ArrayList<>();
    }

    /**
     * Contstructor for {@link Course}
     * Takes a JSONObject as generated by the server.
     * @param jsonObject JSON Object must have the following keys present:
     *                   <ul>
     *                   <li>"CourseName" - String, course name. EX: "RHETORIC AND COMPOSITION I" for "ENGL 1301".</li>
     *                   <li>"CourseId" - String, course number EX: 1301 in "ENGL 1301".</li>
     *                   <li>"Department" - String, room the section will meet in.</li>
     *                   <li>"CourseResults" - JSONArray, array of {@link Section} in JSONObject format.
     *                   <br>See {@link Section#Section(JSONObject, Course)} for required content of the JSONObject to construct properly.
     *                   <br>This constructor will automatically fill in Course field so that {@link Section#getSourceCourse()} will point to this object to get details.
     *                   <ul/>
     * @throws JSONException
     */
    Course(JSONObject jsonObject) throws JSONException {

        if(jsonObject.has("CourseId")) {
            this.courseNumber = jsonObject.getString("CourseId");
            Log.i("New Course ID", getCourseNumber());
        } else throw new JSONException("CourseName not found");

        if(jsonObject.has("CourseName")) {
            this.courseTitle = jsonObject.getString("CourseName");
            Log.i("New Course Title", getCourseTitle());
        } else throw new JSONException("CourseName not found");

        if(jsonObject.has("Department")) {
            this.departmentAcronym =  jsonObject.getString("Department");
            Log.i("New Course Department", getDepartmentAcronym());
        } else throw new JSONException("Department not found");

        if(jsonObject.has("CourseResults")) {
            JSONArray jsonSectionList = jsonObject.getJSONArray("CourseResults");
            this.sectionList = new ArrayList<>(jsonSectionList.length());

            for(int index = jsonSectionList.length(); index != 0;index--){
                Log.i("New Course Section: ",jsonSectionList.getJSONObject( index-1 ).toString());
                this.sectionList.add(new Section(jsonSectionList.getJSONObject(index - 1), this));
                Log.i("New Course Section: ", "Section Added");
             }
            Collections.reverse(sectionList);
        } else throw new JSONException("CourseResults not found");
    }

    /**
     * Creates a JSONObject from this Course to match server generation. It will also call {@link Section#toJSON()} on every Section in the {@link #sectionList} and place them in a JSONArray.
     * @return JSONObject
     */
    public JSONObject toJSON() {
        JSONObject course = new JSONObject();
        try {
            course.put("CourseId", getCourseNumber());
            course.put("CourseName", getCourseTitle());
            course.put("Department", getDepartmentAcronym());
            ArrayList<JSONObject> courseResults = new ArrayList<>();
            for(Section section : sectionList){
                courseResults.add(section.toJSON());
            }
            JSONArray sectionJSON = new JSONArray(courseResults);
            course.put("CourseResults",sectionJSON);
        } catch (JSONException e) {
            e.printStackTrace();
        }

        Log.i("New Course JSON", "Course JSON built: " + course.toString());

        return course;
    }

    /**
     * Creates a JSONObject from this Course to match server generation. Similar to {@link #toJSON()}, but will generate a JSONArray with only the supplied section object instead of from the ArrayLis of sections in this Course.
     *
     * @param section Section to use in JSONArray
     * @return JSONObject with formatting
     */
    public JSONObject toJSON(Section section) {
        JSONObject course = new JSONObject();
        try {
            course.put("CourseId", getCourseNumber());
            course.put("CourseName", getCourseTitle());
            course.put("Department", getDepartmentAcronym());
            ArrayList<JSONObject> courseResults = new ArrayList<>();
            courseResults.add(section.toJSON());
            JSONArray sectionJSON = new JSONArray(courseResults);
            course.put("CourseResults",sectionJSON);
        } catch (JSONException e) {
            e.printStackTrace();
        }

        Log.i("New Course JSON", "Course JSON built: " + course.toString());

        return course;
    }

    /**
     * Adds the specified section to the Section ArrayList contained in this Course.
     *
     * Will not add section if it is already in the list.
     * @param sectionToAdd Section to be added
     * @return return true of section is not in the list, false otherwise.
     */
    public boolean addSection(Section sectionToAdd) {
        if (!sectionList.contains(sectionToAdd)) {
            return sectionList.add(sectionToAdd);
        } else return false;
    }

    /**
     * Builds an ArrayList of Courses by iterating over each JSONObject in the supplied JSONArray and converting into a Course Object via {@link Course#Course(JSONObject)}.
     * After the Course object is created it is added to an ArrayList to be returned.
     *
     * If the Course constructor throws a JSONException it is assumed that the object retrieved from the original JSONArray is a JSONObject in string format.
     * The String is
     *
     * @param jsonCourses JSONArray of Courses as JSONObjects
     * @return ArrayList<Course>
     * @throws JSONException throws
     */
    public static ArrayList<Course> buildCourseList(JSONArray jsonCourses) throws JSONException {

        ArrayList<Course> courseList = new ArrayList<>(jsonCourses.length());

        for(int index = jsonCourses.length(); index != 0;index--){
            JSONObject courseJSON;
            try {
                courseJSON = jsonCourses.getJSONObject(index - 1);
            }
            catch (JSONException e){
                Log.i("New Course JSON", "JSON Construction failed. Attempting to construct JSON from String");
                String courseString = jsonCourses.getString(index - 1);
                courseJSON = new JSONObject(courseString);
            }

            Log.i("New Course JSON", "test: " + courseJSON.toString() );
            courseList.add(new Course(courseJSON));
        }
        Collections.reverse(courseList);

        return courseList;
    }

    /**
     * Obtains the course number stored in this course.<br>EX: 1301 in "ENGL 1301".
     * @return String course number
     */
    public String getCourseNumber() {
        return courseNumber;
    }

    /**
     * Obtains the department acronym stored in this course.<br>EX: ENGL in "ENGL 1301".
     * @return String department acronym
     */
    public String getDepartmentAcronym() {
        return departmentAcronym;
    }

    public String getCourseDescription(){
        return getDepartmentAcronym() + " " + getCourseNumber() + " - " + getCourseTitle();
    }


    /**
     * Obtains the course title/description stored in this course.<br>EX: "RHETORIC AND COMPOSITION I" for "ENGL 1301".
     * @return String title of course
     */
    public String getCourseTitle() {
        return courseTitle;
    }

    /**
     * Obtains the ArrayList of Sections in this course.
     *
     * @return ArrayList<Section>
     */
    public ArrayList<Section> getSectionList() {
        return sectionList;
    }
}
